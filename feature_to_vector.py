from FlagEmbedding import BGEM3FlagModel
import pandas as pd
import numpy as np 
import logging

def BGMM3(semantic):
    model = BGEM3FlagModel('./bge-base-en',use_fp16=True)
    vector = model.encode(semantic,batch_size=1,max_length=512)['dense_vecs']
    return vector



if __name__ == '__main__':
    logging.basicConfig(filename='./log/feature2vec.txt',  
                    level=logging.INFO,  
                    format='%(asctime)s - %(levelname)s - %(message)s')
    X = []
    y = []

    start_index = 0
    total_samples = 0
    processed_samples = 0

    for df in pd.read_csv("./dataset/origin_androzoo.csv", chunksize=1000):
        #df = pd.read_csv("F:\\FqexTest\\zero-day\\dataset\\origin_androzoo.csv")
        df['label'] = (df['malware'] == 1).astype(int)   
        df.loc[df['benign'] == 1, 'label'] = 0  
        df = df.drop(['benign', 'malware'], axis=1)

        features = df['features']
        labels = df['label']
    
    
        for feature,label in zip(features, labels):
            vector = BGMM3(feature)
            X.append(vector)
            y.append(label)
            processed_samples += 1
            if processed_samples % 100 == 0:  
                progress = (processed_samples / total_samples) * 100 if total_samples > 0 else 0  
                print(f"Processed {processed_samples} samples ({progress:.2f}%)")  
                logging.info(f"Processed {processed_samples} samples ({progress:.2f}%)")
        if total_samples == 0:  
            total_samples = len(df)


   # X_old = np.load('F:\\FqexTest\\zero-day\\feature_vector and labels\\androzoo_vector_origin.npy', allow_pickle=True) 
    X = np.array(X)
    y = np.array(y)
   # X_combined = np.concatenate((X_old, X))  
    np.save('./feature_vector and labels/androzoo_vector_origin.npy', X)  
    np.save('./feature_vector and labels/androzoo_label_origin.npy', y)  
  

    
    

